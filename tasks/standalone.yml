---

- name: Create the RKE2 config dir
  ansible.builtin.file:
    state: directory
    path: /etc/rancher/rke2
    owner: root
    group: root
    mode: 0755

- name: Copy RKE2 config
  ansible.builtin.template:
    src: "{{ rke2_config }}"
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: 0600
  notify: "Config file changed"

- name: Copy Containerd Registry Configuration file
  ansible.builtin.template:
    src: "{{ rke2_custom_registry_path }}"
    dest: /etc/rancher/rke2/registries.yaml
    owner: root
    group: root
    mode: 0600
  when: rke2_custom_registry_mirrors.0.endpoint | length > 0
  notify: "Config file changed"

- name: Start RKE2 service on the server node
  ansible.builtin.systemd:
    name: "{{ rke2_service_name }}"
    state: started
    enabled: true
  environment:
    RKE2_TOKEN: "{{ rke2_token }}"
  notify: "Service (re)started"

- name: Wait for the first server be ready - no CNI
  ansible.builtin.shell: |
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get node "{{ inventory_hostname }}" -o jsonpath='{range .status.conditions[*]}{.message}{"\n"}{end}'
  args:
    executable: /bin/bash
  changed_when: false
  register: node_status
  until:
  - '"kubelet has sufficient memory available"  in node_status.stdout_lines'
  - '"kubelet has no disk pressure"  in node_status.stdout_lines'
  - '"kubelet has sufficient PID available"  in node_status.stdout_lines'
  - ('"cni plugin not initialized" in node_status.stdout' or '"kubelet is posting ready status." in node_status.stdout')
  retries: 100
  delay: 15
  when: rke2_cni == 'none'

- name: Wait for the first server be ready - with CNI
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes | grep "{{ inventory_hostname }}"
  args:
    executable: /bin/bash
  changed_when: false
  register: first_server
  until:
    - '" Ready "  in first_server.stdout'
  retries: 40
  delay: 15
  when: rke2_cni != 'none'
